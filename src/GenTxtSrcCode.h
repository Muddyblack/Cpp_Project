/**
 * This program generates C/C++ code from text input files in respect of the passed parameters.
 * This file mages all these parameters and helps the user to understand how all of this works.
 *
 * @file GenTxtSrcCode.h
 * @brief This file contains the GenTxtSrcCode class, which handles the generation of C/C++ code based on user input parameters.
 */

#ifndef GENTXTSRCCODE_H
#define GENTXTSRCCODE_H

#include <Logger.h>
#include <map>
#include <getopt.h>
#include <unordered_set>

#include <ProjectPathFinder.h>
#include <Parameter.h>

/**
/**
 * @class GenTxtSrcCode
 * @brief Handles the generation of C/C++ code based on user input parameters.
 *
 * The GenTxtSrcCode class is responsible for generating C/C++ code from text input files. It provides functionality to parse command-line options,
 * validate input parameters, generate code based on the parsed options and input files, and write the generated code to header and source files.
 *
 * The code generation process involves extracting options and variables from input files, validating and checking the provided parameters,
 * and generating code based on the extracted information.
 */
class GenTxtSrcCode
{
private:
    int argc;    /**< The number of command-line arguments */
    char **argv; /**< The array of command-line arguments */

    // Project infomations
    std::string PROJECT_NAME = "GenTxtSrcCode";
    ProjectPathFinder pathFinder; // Added braces for initialization
    const std::string PROJECT_PATH = pathFinder.getProjectFolderPath(PROJECT_NAME);

    struct ParamStruct parameterInfo;
    struct VariableStruct variableInfo;
    bool checkArgs = true;

    // Check if the name is a reserved keyword
    static std::unordered_set<std::string> reservedKeywords; /**< A set of reserved keywords in the C/C++ language */

    // Options
    const static int optionsAmount = 10;
    const struct option longOptions[optionsAmount] = {
        {"headerdir", required_argument, nullptr, 'H'},
        {"sourcedir", required_argument, nullptr, 'S'},
        {"outputtype", required_argument, nullptr, 't'},
        {"outputfilename", required_argument, nullptr, 'f'},
        {"namespace", required_argument, nullptr, 'n'},
        {"signperline", required_argument, nullptr, 'l'},
        {"check", no_argument, nullptr, 'C'},
        {"help", no_argument, nullptr, 'h'},
        {nullptr, 0, nullptr, 0}};

    /**
     * @brief Prints the help text with usage instructions and contact information.
     */
    void printHelpText();

    /**
     * Determine the programming language from string.
     *
     * @param input The input string to check.
     * @return The detected programming language: "cpp" for C++, "c" for C
     */
    std::string checkLanguageType(const std::string &input);

    /**
     * Checks if the provided file name is valid.
     *
     * @param fileName The file name to be validated.
     * @return True if the file name is valid, false otherwise.
     */
    void isValidFileName(const std::string &fileName);

    /**
     * @brief Checks if the provided namespace is valid.
     *
     * This function validates the provided namespace name by checking if it conforms to the C++ namespace naming conventions.
     * If the namespace name is invalid, a fatal error is logged, and the program exits.
     *
     * @param ns The namespace name to be validated.
     */
    void isValidNamespace(const std::string &ns);

    /**
     * @brief Checks if the provided variable name is valid and generates a valid variable name if needed.
     *
     * This function validates the provided variable name by checking if it follows the naming conventions for C/C++ variables.
     * If the variable name is invalid, a fatal error is logged, and the program exits.
     * If the variable name is a reserved keyword, a new valid variable name is generated by appending a numeric index.
     *
     * @param name The variable name to be validated.
     * @param filename The original input file name (used for generating a new variable name).
     * @return The valid variable name.
     */
    std::string isValidVariableName(const std::string &name, const std::string &filename);

    /**
     * @brief Parses the command-line options and sets the corresponding member variables.
     */
    void parseOptions();

    /**
     * @brief Checks the parsed options and sets default values if necessary.
     *
     * This function checks the parsed options and sets default values for any missing options.
     * If an option is missing and there is no default value available, an appropriate default value is assigned.
     *
     * @param options The parsed options as a map of option names to option values.
     */
    void checkOptions(std::map<std::string, std::string> &options);

    /**
     * @brief Checks the parsed variable information and sets default values if necessary.
     *
     * This function checks the parsed variable information and sets default values for any missing or invalid information.
     * If a variable's information is missing or invalid, appropriate default values are assigned.
     *
     * @param variable The parsed variable information as a map of variable properties.
     * @param filename The original input file name (used for error logging).
     */
    void checkVariable(std::map<std::string, std::string> &variable, const std::string &filename);

    /**
     * @brief Prints the extracted options and variables for debugging purposes.
     *
     * This function prints the extracted options and variables for debugging purposes.
     * It can be used to verify that the extraction process is working correctly.
     *
     * @param options The extracted options as a map of option names to option values.
     * @param variables The extracted variables as a vector of maps, where each map represents a variable's properties.
     */
    void printExtraction(std::map<std::string, std::string> &options, std::vector<std::map<std::string, std::string>> &variables);

    /**
     * @brief Generates the code based on the parsed command-line options and input files.
     */
    void codeGeneration();

public:
    /**
     * @brief Constructor for the GenTxtSrcCode class.
     * @param argc The number of command-line arguments.
     * @param argv The array of command-line arguments.
     */
    GenTxtSrcCode(int argc, char *argv[]);
};

#endif // GENTXTSRCCODE_H
